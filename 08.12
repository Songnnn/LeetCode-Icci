class Solution {
public:
    bool yes(vector<vector<int>> visited, int i, int j, int n) {
        //判断该位置是否可以放置皇后 
        for (int k = 0; k < n; k++) {
            if (visited[i][k] == 1) return false; //这行已经有皇后了
        }
        for (int k = 0; k < n; k++) {
            if (visited[k][j] == 1) return false; //这列已经有皇后了
        }
        //主对角线
        int ii = i, jj = j;
        while ((ii >= 0 && ii < n) && (jj >= 0 && jj < n)) {
            ii++, jj++;
        }
        ii--, jj--;
        while ((ii >= 0 && ii < n) && (jj >= 0 && jj < n)) {
            if (visited[ii--][jj--] == 1) return false;
        }
        //副对角线
        while ((i >= 0 && i < n) && (j >= 0 && j < n)) {
            i--, j++;
        }
        i++, j--;
        while ((i >= 0 && i < n) && (j >= 0 && j < n)) {
            if (visited[i++][j--] == 1) return false;
        }
        return true;
    }

    void backtrack(vector<vector<string>>& res, int n, int row, vector<vector<int>> visited, vector<string> temp) {
        if (row < n) {
            for (int j = 0; j < n; j++) {
                if (yes(visited, row, j, n)) { //如果可以放置
                    visited[row][j] = 1;
                    string s;
                    for (int i = 0; i < n; i++) {
                        if (i == j) s += "Q";
                        else s += ".";
                    }
                    temp.push_back(s);
                    if (row == n - 1) res.push_back(temp);
                    else backtrack(res, n, row + 1, visited, temp);
                    visited[row][j] = 0;
                    temp.pop_back();
                }
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<int> v(n, 0);
        vector<vector<int>> visited(n, v);
        vector<vector<string>> res;
        vector<string> temp;
        backtrack(res, n, 0, visited, temp);
        return res;
    }
};
